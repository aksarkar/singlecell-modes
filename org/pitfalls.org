#+TITLE: Common pitfalls in estimating the number of modes of gene expression
#+SETUPFILE: setup.org

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(venv="singlecell") :dir /scratch/midway2/aksarkar/modes/

  #+RESULTS:
  : Submitted batch job 49772761

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])

    import colorcet
    import gzip
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import scipy.stats as st
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[46]:
  :END:

* Joint distribution of expression across genes

  Reproduce Fig 1 of [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4112276/][Kharchenko et al 2014]]:

  [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4112276/bin/nihms-590625-f0001.jpg]]

  They analyzed scRNA-Seq of mouse embryonic fibroblast cells generated by
  [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3129258/][Islam et al 2011]].

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/modes/
    curl -s -o GSE29087_L139_expression_tab.txt.gz "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE29087&format=file&file=GSE29087_L139_expression_tab.txt.gz"
  #+END_SRC

  #+RESULTS:

  Parse the data.

  #+BEGIN_SRC ipython
    with gzip.open('/scratch/midway2/aksarkar/modes/GSE29087_L139_expression_tab.txt.gz', 'rt') as f:
      next(f)  # first three lines are description
      next(f)
      next(f)
      barcodes = next(f).split()
      samples = next(f).split()
      next(f)  # skip header
      features = []
      counts = []
      for line in f:
        row = line.split('\t')
        features.append(row[:6])
        counts.append([int(x) if x else np.nan for x in row[6:]])
      counts = np.ma.masked_invalid(np.array(counts).T)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[37]:
  :END:

  Pick two cells, and compute \(\log_2(r_{ij} + 1)\) for every gene.

  #+BEGIN_SRC ipython
    x = np.log(counts[1] + 1) / np.log(2)
    y = np.log(counts[2] + 1) / np.log(2)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[76]:
  :END:

  Plot the joint distribution of expression values across the two cells.

  #+BEGIN_SRC ipython :ipyfile figure/pitfalls.org/islam-mef.png
    plt.clf()
    plt.gcf().set_size_inches(3, 3)
    plt.scatter(x, y, c='k', s=1)
    plt.xlabel('$\log_2(r + 1)$ of cell 1')
    _ = plt.ylabel('$\log_2(r + 1)$ of cell 2')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[75]:
  [[file:figure/pitfalls.org/islam-mef.png]]
  :END:

  Now, simulate negative binomial count data, assuming 25,000 molecules per
  cell and a range of parameters [[https://users.rcc.uchicago.edu/~aksarkar/singlecell-qtl/zinb.html#orgac1f6dc][matching real data]]:

  https://users.rcc.uchicago.edu/~aksarkar/singlecell-qtl/figure/zinb.org/joint-distribution.png

  #+BEGIN_SRC ipython
    np.random.seed(0)
    mu = np.exp(np.random.uniform(-15, -4, size=10000))
    phi = np.exp(np.random.uniform(-4, 1, size=10000))
    size = 2.5e4
    x = np.log(np.random.poisson(lam=size * mu * np.random.gamma(phi, phi)) + 1) / np.log(2)
    y = np.log(np.random.poisson(lam=size * mu * np.random.gamma(phi, phi)) + 1) / np.log(2)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[119]:
  :END:

  #+BEGIN_SRC ipython :ipyfile figure/pitfalls.org/pois.png
    plt.clf()
    plt.gcf().set_size_inches(3, 3)
    plt.scatter(x, y, c='k', s=1)
    plt.xlabel('$\log_2(r + 1)$ of cell 1')
    _ = plt.ylabel('$\log_2(r + 1)$ of cell 2')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[120]:
  [[file:figure/pitfalls.org/pois.png]]
  :END:

* Distribution of log CPM across cells

