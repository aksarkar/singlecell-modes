#+TITLE: Expression variation in 10X v3 PBMC data
#+SETUPFILE: setup.org

* Introduction

  We previously found no evidence of multi-modal gene expression in scRNA-seq
  of 68K PBMCs and 540K immune
  cells. [[https://nbviewer.jupyter.org/urls/dl.dropbox.com/s/ys3814yekrm19kd/Analyses%2520regarding%2520genes%2520with%2520multimodal%2520expression%2520distribution%2520.ipynb][Florian
  Wagner suggested]] this could be because the noise introduced by the
  experiments was too high, and that a more sensitive experiment would reveal
  multi-modal patterns. As a specific example, he analyzed scRNA-seq of
  [[https://support.10xgenomics.com/single-cell-gene-expression/datasets/3.0.0/pbmc_10k_v3][10K
  PBMCs generated by the 10X platform, version 3]]. Here, we repeat our
  systematic analysis on this data set.

* Setup
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(venv="scmodes",partition="gpu2",opts="--gres=gpu:1",memory="4G") :exports none :dir /scratch/midway2/aksarkar/modes

  #+CALL: ipython3(venv="scmodes",partition="mstephens",memory="4G") :exports none :dir /scratch/midway2/aksarkar/modes

  #+RESULTS:
  : Submitted batch job 64832637

  #+BEGIN_SRC ipython
    import anndata
    import numpy as np
    import pandas as pd
    import scanpy
    import scipy.io as si
    import scipy.sparse as ss
    import scmodes
    import scmodes.ebpm.sgd
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  #+BEGIN_SRC ipython
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
    plt.rcParams['font.family'] = 'Nimbus Sans'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

* Data

  Read the count matrix.

  #+BEGIN_SRC ipython :async t
    x = (si.mmread('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics/pbmc_10k_v3/filtered_feature_bc_matrix/matrix.mtx.gz')
         .tocsr())
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[7]:
  :END:

  #+BEGIN_SRC ipython
    x.shape
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[8]:
  : (33538, 11769)
  :END:

  Read the metadata.

  #+BEGIN_SRC ipython
    barcodes = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics/pbmc_10k_v3/filtered_feature_bc_matrix/barcodes.tsv.gz', header=None, sep='\t')
    barcodes.columns = ['barcode']
    genes = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics/pbmc_10k_v3/filtered_feature_bc_matrix/features.tsv.gz', header=None, sep='\t')
    genes.columns = ['ensg', 'name', 'type']
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[25]:
  :END:

  #+BEGIN_SRC ipython
    data = anndata.AnnData(x.T, obs=barcodes, var=genes)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[26]:
  :END:

  Keep genes with a non-zero observation in at least 1 cell.

  #+BEGIN_SRC ipython
    scanpy.pp.filter_genes(data, min_cells=1)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[29]:
  :END:

  #+BEGIN_SRC ipython
    data.shape
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[20]:
  : (11769, 23036)
  :END:

  Write out the filtered data.

  #+BEGIN_SRC ipython
    data.write('/scratch/midway2/aksarkar/modes/10k_pbmc_v3.h5ad')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[30]:
  :END:

  Read the filtered data.

  #+BEGIN_SRC ipython
    data = anndata.read_h5ad('/scratch/midway2/aksarkar/modes/10k_pbmc_v3.h5ad')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  :END:

* Results
** Gamma assumption

   Fit a Gamma distribution to expression variation at each gene.

   #+BEGIN_SRC ipython :async t
     gamma_res = scmodes.ebpm.sgd.ebpm_gamma(data.X, batch_size=128, lr=5e-2, max_epochs=40, verbose=True)
     gamma_res = pd.DataFrame(np.vstack(gamma_res[:-1]).T, columns=['log_mu', 'neg_log_phi'])
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[39]:
   :END:

   Write out the results.

   #+BEGIN_SRC ipython
     gamma_res.to_csv('/scratch/midway2/aksarkar/modes/10k_pbmc_v3-gamma.txt.gz', sep='\t')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[43]:
   :END:

   Test GOF at each gene.

   #+BEGIN_SRC ipython :async t
     s = data.X.sum(axis=1).A.ravel()
     gamma_gof = []
     for j, (gene, (log_mu, neg_log_phi)) in enumerate(gamma_res.iterrows()):
       d, p = scmodes.benchmark.gof._gof(
         x=data.X[:,j].A.ravel(),
         cdf=scmodes.benchmark.gof._zig_cdf,
         pmf=scmodes.benchmark.gof._zig_pmf,
         size=s,
         log_mu=log_mu,
         log_phi=-neg_log_phi)
       gamma_gof.append([gene, d, p])
     gamma_gof = pd.DataFrame(gamma_gof, columns=['gene', 'stat', 'p'])
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[46]:
   :END:

   Write the GOF results.

   #+BEGIN_SRC ipython
     gamma_gof.to_csv('/project2/mstephens/aksarkar/projects/singlecell-modes/data/gof/10k_pbmc_v3-gamma.txt.gz', sep='\t')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[48]:
   :END:

   Plot the histogram of GOF \(p\)-values.

   #+BEGIN_SRC ipython :ipyfile figure/chromium3.org/gamma-gof-hist.png
     plt.clf()
     plt.gcf().set_size_inches(2, 2)
     plt.hist(gamma_gof['p'].values.ravel(), bins=np.linspace(0, 1, 11), color='0.7', density=True)
     plt.axhline(y=1, lw=1, ls=':', c='k')
     plt.xlim(0, 1)
     plt.xlabel('$p$-value')
     plt.ylabel('Density')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[50]:
   [[file:figure/chromium3.org/gamma-gof-hist.png]]
   :END:

   Report the fraction of genes which significantly depart from Gamma
   (Bonferroni-corrected \(p < 0.05\)).

   #+BEGIN_SRC ipython
     sig = gamma_gof[gamma_gof['p'] < 0.05 / gamma_gof.shape[0]]
     sig.shape[0] / gamma_gof.shape[0]
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[51]:
   : 0.046188574405278696
   :END:

** Point-Gamma assumption

   Fit a point-Gamma assumption distribution to expression variation.

   #+BEGIN_SRC ipython :async t
     gamma_res = pd.read_csv('/scratch/midway2/aksarkar/modes/10k_pbmc_v3-gamma.txt.gz', sep='\t', index_col=0)
     point_gamma_res = scmodes.ebpm.sgd.ebpm_point_gamma(
       data.X,
       init=(gamma_res['log_mu'].values.reshape(1, -1),
             gamma_res['neg_log_phi'].values.reshape(1, -1)),
       batch_size=128,
       lr=5e-2,
       max_epochs=20,
       verbose=True)
     point_gamma_res = pd.DataFrame(np.vstack(point_gamma_res[:-1]).T, columns=['log_mu', 'neg_log_phi', 'logodds'])
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[64]:
   :END:

   Write out the results.

   #+BEGIN_SRC ipython
     point_gamma_res.to_csv('/scratch/midway2/aksarkar/modes/10k_pbmc_v3-point-gamma.txt.gz')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[65]:
   :END:

   Test for GOF.

   #+BEGIN_SRC ipython :async t
     point_gamma_gof = []
     for j, (gene, (log_mu, neg_log_phi, logodds)) in enumerate(point_gamma_res.iterrows()):
       d, p = scmodes.benchmark.gof._gof(
         x=data.X[:,j].A.ravel(),
         cdf=scmodes.benchmark.gof._zig_cdf,
         pmf=scmodes.benchmark.gof._zig_pmf,
         size=s,
         log_mu=log_mu,
         log_phi=-neg_log_phi,
         logodds=logodds)
       point_gamma_gof.append([gene, d, p])
     point_gamma_gof = pd.DataFrame(point_gamma_gof, columns=['gene', 'stat', 'p'])
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[67]:
   :END:

   Write out the GOF results.

   #+BEGIN_SRC ipython
     point_gamma_gof.to_csv('/project2/mstephens/aksarkar/projects/singlecell-modes/data/gof/10k_pbmc_v3-point-gamma.txt.gz')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[68]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/chromium3.org/point-gamma-got-hist.png
     plt.clf()
     plt.gcf().set_size_inches(2, 2)
     plt.hist(point_gamma_gof['p'].values.ravel(), bins=np.linspace(0, 1, 11), color='0.7', density=True)
     plt.axhline(y=1, lw=1, ls=':', c='k')
     plt.xlim(0, 1)
     plt.xlabel('$p$-value')
     plt.ylabel('Density')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[69]:
   [[file:figure/chromium3.org/point-gamma-got-hist.png]]
   :END:

   Report the fraction of genes which significantly depart from Gamma
   (Bonferroni-corrected \(p < 0.05\)).

   #+BEGIN_SRC ipython
     sig = point_gamma_gof[point_gamma_gof['p'] < 0.05 / point_gamma_gof.shape[0]]
     sig.shape[0] / point_gamma_gof.shape[0]
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[70]:
   : 0.04575447126237194
   :END:

** Unimodal assumption

   Extract all genes which departed from a Gamma assumption on expression
   variation.

   #+BEGIN_SRC ipython
     query = data[:,gamma_gof['p'] < 0.05 / gamma_gof.shape[0]]
     query.shape
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[71]:
   : (11769, 1064)
   :END:

   Write out the data.

   #+BEGIN_SRC ipython
     query.write('/scratch/midway2/aksarkar/modes/unimodal-data/10k_pbmcs_v3.h5ad')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[73]:
   :END:

   Test for goodness of fit of UA.

   #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/modes/
     sbatch --partition=broadwl -n1 -c28 --exclusive --time=24:00:00 --job-name=gof
     #!/bin/bash
     source activate scmodes
     python <<EOF
     import anndata
     import multiprocessing as mp
     import pandas as pd
     import scmodes
     with mp.Pool() as pool:
       data = anndata.read_h5ad('/scratch/midway2/aksarkar/modes/unimodal-data/10k_pbmcs_v3.h5ad')
       x = pd.DataFrame(data.X.A, index=data.obs['barcode'], columns=data.var['name'])
       unimodal_gof_res = scmodes.benchmark.evaluate_gof(x, methods=['unimodal'], pool=pool)
       unimodal_gof_res.to_csv('/project2/mstephens/aksarkar/projects/singlecell-modes/data/gof/10k_pbmcs_v3-unimodal.txt.gz', sep='\t')
     EOF
   #+END_SRC

   #+RESULTS:
   : Submitted batch job 64821988

   Read the results.

   #+BEGIN_SRC ipython
     unimodal_gof_res = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-modes/data/gof/10k_pbmcs_v3-unimodal.txt.gz', index_col=0, sep='\t')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[9]:
   :END:

   Plot the histogram of GOF \(p\)-values.

   #+BEGIN_SRC ipython :ipyfile figure/chromium3.org/unimodal-gof-hist.png
     plt.clf()
     plt.gcf().set_size_inches(2, 2)
     plt.hist(unimodal_gof_res['p'].values.ravel(), bins=np.linspace(0, 1, 11), color='0.7', density=True)
     plt.axhline(y=1, lw=1, ls=':', c='k')
     plt.xlim(0, 1)
     plt.xlabel('$p$-value')
     plt.ylabel('Density')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[6]:
   [[file:figure/chromium3.org/unimodal-gof-hist.png]]
   :END:

   Report the fraction of genes which significantly depart from UA
   (Bonferroni-corrected \(p < 0.05\)).

   #+BEGIN_SRC ipython
     sig = unimodal_gof_res[unimodal_gof_res['p'] < 0.05 / unimodal_gof_res.shape[0]]
     sig.shape[0] / unimodal_gof_res.shape[0]
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[11]:
   : 0.1156015037593985
   :END:

   Plot the top genes which significantly depart from UA.

   #+BEGIN_SRC ipython :ipyfile figure/chromium3.org/unimodal-ex.png
     plt.clf()
     fig, ax = plt.subplots(2, 4)
     fig.set_size_inches(8, 4)
     for a, (j, row) in zip(ax.ravel(), sig.sort_values('p').iterrows()):
       query = data.X[:,j].A.ravel()
       a.hist(query, bins=np.arange(query.max() + 2), color='k')
       a.set_title(row['gene'])
     for a in ax:
       a[0].set_ylabel('Num cells')
     for a in ax.T:
       a[-1].set_xlabel('Num mols')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[23]:
   [[file:figure/chromium3.org/unimodal-ex.png]]
   :END:
