#+TITLE: Effect of capture rate on sampling variation
#+SETUPFILE: setup.org

* Introduction

  We and others argue that sampling variation in observed scRNA-seq counts
  follows:

  \[ x_1, \ldots, x_p \mid n \sim \mathrm{Multinomial}(n, (\alpha_1, \ldots,
  \alpha_p)) \]

  where \(\alpha_j\) denotes the relative abundance of gene \(j\) in the
  cell. This implicitly assumes sampling /with replacement/, i.e. that the pool
  of molecules is much larger than the sampled molecules. But what happens if
  we sample a non-trivial fraction of all available molecules, say 10-40%
  (e.g., [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4193940/][Shalek 2014]])? In the extreme case, what would happen if we actually
  managed to sequence all of the available molecules?

* Setup
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(venv="scmodes", partition="mstephens") :exports none :dir /scratch/midway2/aksarkar/modes/

  #+RESULTS:
  : Submitted batch job 61518341

  #+BEGIN_SRC ipython
    import numpy as np
    import scipy.stats as st
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[12]:
  :END:

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  #+BEGIN_SRC ipython
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
    plt.rcParams['font.family'] = 'Nimbus Sans'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

* Results
** Simple case

   Suppose there are only two genes. Then, the Multinomial distribution reduces
   to the binomial distribution, and its analogue /without replacement/ is the
   hypergeometric distribution.

   Suppose we have a total of \(N\) molecules, of which \(n_i\) come from gene
   \(i\). Further suppose we sequence \(p\) fraction of the molecules. Then, we
   have two descriptions of the data:

   \[ x_1 \sim \mathrm{Binomial}(Np, n_1 / N) \triangleq p \]

   \[ x_1 \sim \mathrm{Hypergeometric}(Np, N, n_1) \triangleq q \]

   These have equal expected value \(n_1 p\), but unequal variances:

   \[ V_p[x_1] = n_1 p \frac{n_2}{N} \]

   \[ V_q[x_1] = n_1 p \frac{n_2}{N} \frac{N(1 - p)}{N - 1} \]

   Look at the log likelihood for some settings of these parameters.

   #+BEGIN_SRC ipython
     N = 1e5
     n1 = .01 * N
     p = .05
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[35]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/capture.org/simple-1.png
     plt.clf()
     plt.gcf().set_size_inches(5, 3)
     mean = n1 * p
     sd = n1 * p * (N - n1) / N
     grid = np.arange(np.floor(mean - 10), np.ceil(mean + 10) + 1)
     plt.plot(grid, st.binom(n=N * p, p=n1 / N).logpmf(grid), lw=1, c='k', label='Binomial')
     plt.plot(grid, st.hypergeom(M=N, n=n1, N=N * p).logpmf(grid), lw=1, c='r', label='Hypergeometric')
     plt.axvline(x=n1 * p, ls='--', lw=1, c='k')
     plt.legend(frameon=False, bbox_to_anchor=(1, .5), loc='center left')
     plt.xlabel('Molecule count')
     plt.ylabel('Log likelihood')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[42]:
   [[file:figure/capture.org/simple-1.png]]
   :END:

   We built an [[http://shiny.stephenslab.uchicago.edu:5009/capture][interactive simulation]] to look at different parameter settings.
