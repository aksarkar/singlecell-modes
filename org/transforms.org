#+TITLE: Transformations of deconvolved gene expression distributions
#+SETUPFILE: setup.org

* Introduction

  From the perspective of [[file:deconvolution.org][distribution
  deconvolution]], scRNA-seq count data has a mean-variance relationship simply
  by convolution with a Poisson technical noise model.

  Here, we investigate whether the latent gene expression distribution also has
  a mean-variance relationship, and what happens to it when we transform the
  distribution.

* Setup

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(partition="mstephens",mem="16G",venv="scmodes") :dir /scratch/midway2/aksarkar/modes

  #+RESULTS:
  : Submitted batch job 59956313

  #+BEGIN_SRC ipython
    import numpy as np
    import pandas as pd
    import scmodes
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  #+BEGIN_SRC ipython
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

* Methods
  :PROPERTIES:
  :CUSTOM_ID: methods
  :END:

  The key idea of our approach is to deconvolve the gene expression of iPSCs
  assuming:

  \[ x_{ijk} \sim \mathrm{Poisson}(s_{ij} \exp(\mathbf{z}_i' \mathbf{b}_j)
  \lambda_{ijk}) \]

  \[ \lambda_{ijk} \sim g_{ik}(\cdot) = \pi_{ik} \delta_0(\cdot) + (1 - \pi_{ik})
  \mathrm{Gamma}(\mu_{ik}, \phi_{ik}) \]

  From the fitted \(\hat{g}_1, \ldots, \hat{g}_p\), we can investigate whether
  there is a mean-variance relationship in latent gene expression.
  
* Results
  :PROPERTIES:
  :CUSTOM_ID: results
  :END:
** Untransformed distribution
   :PROPERTIES:
   :CUSTOM_ID: untransformed
   :END:

  Read the deconvolved distributions.

  #+BEGIN_SRC ipython
    log_mu = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-mu.txt.gz', sep=' ', index_col=0)
    log_phi = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-phi.txt.gz', sep=' ', index_col=0)
    logodds = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-logodds.txt.gz', sep=' ', index_col=0)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  :END:

  Throw out the individual with evidence of contamination.

  #+BEGIN_SRC ipython
    for x in (log_mu, log_phi, logodds):
      del x['NA18498']
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[5]:
  :END:

  Recover the mean and variance of latent gene expression per gene, per individual.

  #+BEGIN_SRC ipython
    # Important: log(sigmoid(x)) = -softplus(-x)
    mean = np.exp(log_mu - np.log1p(np.exp(logodds)))
    variance = np.exp(2 * log_mu + log_phi - np.log1p(np.exp(logodds))) + np.exp(-np.log1p(np.exp(logodds)) - np.log1p(np.exp(-logodds)) + 2 * log_mu)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[6]:
  :END:

  Plot the mean/variance relationship.

  #+BEGIN_SRC ipython :ipyfile figure/transforms.org/zig-mean-var.png
    plt.clf()
    plt.gcf().set_size_inches(3, 3)
    plt.semilogx()
    plt.semilogy()
    plt.scatter(mean.values.ravel(), variance.values.ravel(), c='k', s=4, alpha=0.1)
    plt.xlabel('Latent gene expression mean')
    plt.ylabel('Latent gene expression variance')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[7]:
  : Text(0, 0.5, 'Latent gene expression variance')
  [[file:figure/transforms.org/zig-mean-var.png]]
  :END:

  Restrict to the individual with the most cells (\(n=284\)).

  #+BEGIN_SRC ipython :ipyfile figure/transforms.org/zig-mean-var-NA18507.png
    plt.clf()
    plt.gcf().set_size_inches(3, 3)
    plt.semilogx()
    plt.semilogy()
    plt.scatter(mean['NA18507'], variance['NA18507'].values.ravel(), c='k', s=4, alpha=0.1)
    plt.title('NA18507')
    plt.xlabel('Latent gene expression mean')
    plt.ylabel('Latent gene expression variance')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[26]:
  : Text(0, 0.5, 'Latent gene expression variance')
  [[file:figure/transforms.org/zig-mean-var-NA18507.png]]
  :END:

** Log transform
   :PROPERTIES:
   :CUSTOM_ID: log-transform
   :END:

  Assume \(\lambda_{ijk} \sim g_{ik}(\cdot)\), as above. Plot the approximate
  relationship between \(E[\ln(\lambda + \epsilon)]\) and
  \(V[\ln(\lambda + \epsilon)]\) by first-order Taylor expansion.

  \[ E[\ln(x + \epsilon)] \approx \ln(E[x] + \epsilon) - \frac{V[x]}{(E[x] + \epsilon)^2} \]

  \[ V[\ln(x + \epsilon)] \approx \frac{2 V[x]}{(E[x] + \epsilon)^2} - \frac{V[x]^2}{(E[x] + \epsilon)^4} \]

  Importantly, \(\epsilon\) needs to be on the same scale as \(\lambda\). But
  \(x_{ijk} \sim \mathrm{Poisson}(s_{ij} \lambda_{ijk})\), so \(\lambda_{ijk}\)
  is on the scale of \(1 / s_{ij}\). Instead of assuming \(x_{ijk} \sim
  F_{ijk}(\cdot)\), assume:

  \[ x_{ijk} \sim \frac{1}{n} \sum_j F_{ijk}(\cdot) \]

  Then, \(E[x_{ijk}] = \frac{1}{n}\sum_j s_{ij} E[\lambda_{ijk}]\). This gives
  us a single scaling factor for \(g_{ik}\).

  Read the metadata for the iPSCs.

  #+BEGIN_SRC ipython
    annotations = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-annotation.txt', sep='\t')
    keep_samples = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/quality-single-cells.txt', sep='\t', index_col=0)
    annotations = annotations.loc[keep_samples.values.ravel()]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[8]:
  :END:

  #+BEGIN_SRC ipython
    s = annotations.loc[(annotations['chip_id'] == 'NA18507').values, 'mol_hs'].mean()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[11]:
  :END:

  #+BEGIN_SRC ipython :ipyfile figure/transforms.org/zig-log-mean-var-NA18507.png
    plt.clf()
    fig, ax = plt.subplots(1, 3, sharey=True)
    fig.set_size_inches(7, 3)
    for a, eps, t in zip(ax, np.array([0, 0.5, 1]) / s, ['0', '1/(2s)', '1/s']):
      a.set_yscale('log')
      a.scatter(np.log(mean['NA18507'] + eps), (2 * variance['NA18507']) / np.square(mean['NA18507'] + eps), c='k', s=4, alpha=0.1)
      a.set_title(f'$\epsilon = {t}$')
    ax[1].set_xlabel('Latent log gene expression mean')
    ax[0].set_ylabel('Latent log gene expression variance')
    fig.tight_layout()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[14]:
  [[file:figure/transforms.org/zig-log-mean-var-NA18507.png]]
  :END:

  Zoom in on highly expressed genes.

  #+BEGIN_SRC ipython :ipyfile figure/transforms.org/zig-log-mean-var-NA18507-inset.png
    plt.clf()
    fig, ax = plt.subplots(1, 3, sharey=True)
    fig.set_size_inches(7, 3)
    for a, eps, t in zip(ax, np.array([0, 0.5, 1]) / s, ['0', '1/(2s)', '1/s']):
      a.set_yscale('log')
      a.set_xlim(-8, -6)
      a.set_ylim(1e-2, 10)
      a.scatter(np.log(mean['NA18507'] + eps), (2 * variance['NA18507']) / np.square(mean['NA18507'] + eps), c='k', s=4, alpha=0.25)
      a.set_title(f'$\epsilon = {t}$')
    ax[1].set_xlabel('Latent log gene expression mean')
    ax[0].set_ylabel('Latent log gene expression variance')
    fig.tight_layout()

  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[18]:
  [[file:figure/transforms.org/zig-log-mean-var-NA18507-inset.png]]
  :END:

** Square root transform
   :PROPERTIES:
   :CUSTOM_ID: sqrt-transform
   :END:

  Assume \(\lambda_{ijk} \sim g_{ik}(\cdot)\), as above. Plot the approximate
  relationship between \(E[\lambda^{1/2}]\) and
  \(V[\lambda^{1/2}]\) by first-order Taylor expansion.

  \[ E[x^{1/2}] \approx (E[x])^{1/2} - \frac{V[x]}{4 E[x]^{3/2}} \]

  \[ V[x^{1/2}] \approx \frac{V[x]}{2 E[x]} - \frac{V[x]^2}{16 E[x]^3} \]

  #+BEGIN_SRC ipython :ipyfile figure/transforms.org/zig-sqrt-mean-var-NA18507.png
    plt.clf()
    plt.gcf().set_size_inches(3, 3)
    plt.semilogx()
    plt.semilogy()
    plt.scatter(np.sqrt(mean['NA18507']), variance['NA18507'] / (2 * mean['NA18507']), c='k', s=4, alpha=0.1)
    plt.xlabel('Latent sqrt gene expression mean')
    plt.ylabel('Latent sqrt gene expression variance')
    plt.gcf().tight_layout()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[53]:
  [[file:figure/transforms.org/zig-sqrt-mean-var-NA18507.png]]
  :END:

** Variance effects versus mean effects
   :PROPERTIES:
   :CUSTOM_ID: ma
   :END:

   After convolution of a Gamma with a Poisson, we expect a quadratic
   mean-variance relationship. But we showed above that after deconvolution, we
   still see a linear mean-variance relationship within samples.

   What if we look between conditions? To investigate this, look at MA plots of
   latent gene expression for two different donor individuals.

   Find the individual with the second-most cells.

   #+BEGIN_SRC ipython
     annotations['chip_id'].value_counts().sort_values(ascending=False).head(n=2)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[23]:
   #+BEGIN_EXAMPLE
     NA18507    284
     NA18501    221
     Name: chip_id, dtype: int64
   #+END_EXAMPLE
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/transforms.org/ma.png
     a = np.log(mean['NA18507'] + 1 / annotations.loc[(annotations['chip_id'] == 'NA18507').values, 'mol_hs'].mean())
     b = np.log(mean['NA18501'] + 1 / annotations.loc[(annotations['chip_id'] == 'NA18501').values, 'mol_hs'].mean())
     plt.clf()
     fig, ax = plt.subplots(1, 2, sharey=True)
     fig.set_size_inches(6, 3)
     ax[0].scatter((a + b) / 2, a - b, s=2, c='k', alpha=0.2)
     ax[0].axhline(y=0, ls=':', lw=1, c='r')
     ax[0].set_title('NA18507 / NA18501')
     ax[1].scatter((a + b) / 2, a - b, s=2, c='k', alpha=0.2)
     ax[1].axhline(y=0, ls=':', lw=1, c='r')
     ax[1].set_xlim(-8, ax[0].get_xlim()[1])
     ax[1].set_title('NA18507 / NA18501 (zoomed)')
     for a in ax:
       a.set_xlabel('Average log latent mean')
     ax[0].set_ylabel('Log ratio latent mean')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[46]:
   [[file:figure/transforms.org/ma.png]]
   :END:
